local_qweights[0:4] = matrix[
    0  8 16 24
    1  9 17 25
    ==========
    2 10 18 26
    3 11 19 27
    ==========
    4 12 20 28
    5 13 21 29
    ==========
    6 14 22 30
    7 15 23 31
]
local_scale[0] = scale(0, 0)
dequantize_s4_to_fp16x2(local_qweights[0], half_weight_buffer[0])
dequantize_s4_to_fp16x2(local_qweights[1], half_weight_buffer[8])
dequantize_s4_to_fp16x2(local_qweights[2], half_weight_buffer[16])
dequantize_s4_to_fp16x2(local_qweights[3], half_weight_buffer[24])

Now the half_weight_buffer becomes:
half_weight_buffer[0:8]   = 0 1  8  9 16 17 24 25
half_weight_buffer[8:16]  = 2 3 10 11 18 19 26 27
half_weight_buffer[16:24] = 4 5 12 13 20 21 28 29
half_weight_buffer[24:32] = 6 7 14 15 22 23 30 31

w = *(half2*)half_weight_buffer[0]   # 0 1
w = w * local_scale[0] + zeros[0]
dequantized_weight[0] = w.x          # 0
dequantized_weight[2] = w.y          # 1
w = *(half2*)half_weight_buffer[8]   # 2 3
w = w * local_scale[0] + zeros[0]
dequantized_weight[4] = w.x          # 2
dequantized_weight[6] = w.y          # 3
w = *(half2*)half_weight_buffer[16]  # 4 5
w = w * local_scale[0] + zeros[0]
dequantized_weight[8] = w.x          # 4
dequantized_weight[10] = w.y         # 5
w = *(half2*)half_weight_buffer[24]  # 6 7
w = w * local_scale[0] + zeros[0]
dequantized_weight[12] = w.x         # 6
dequantized_weight[14] = w.y         # 7

w = *(half2*)half_weight_buffer[2]   # 8 9
w = w * local_scale[0] + zeros[0]
dequantized_weight[16] = w.x         # 8
dequantized_weight[18] = w.y         # 9
w = *(half2*)half_weight_buffer[10]  # 10 11
w = w * local_scale[0] + zeros[0]
dequantized_weight[20] = w.x         # 10
dequantized_weight[22] = w.y         # 11
w = *(half2*)half_weight_buffer[18]  # 12 13
w = w * local_scale[0] + zeros[0]
dequantized_weight[24] = w.x         # 12
dequantized_weight[26] = w.y         # 13
w = *(half2*)half_weight_buffer[26]  # 14, 15
w = w * local_scale[0] + zeros[0]
dequantized_weight[28] = w.x         # 14
dequantized_weight[30] = w.y         # 15

w = *(half2*)half_weight_buffer[4]   # 16 17
w = w * local_scale[0] + zeros[0]
dequantized_weight[32] = w.x         # 16
dequantized_weight[34] = w.y         # 17
w = *(half2*)half_weight_buffer[12]  # 18 19
w = w * local_scale[0] + zeros[0]
dequantized_weight[36] = w.x         # 18
dequantized_weight[38] = w.y         # 19
w = *(half2*)half_weight_buffer[20]  # 20 21
w = w * local_scale[0] + zeros[0]
dequantized_weight[40] = w.x         # 20
dequantized_weight[42] = w.y         # 21
w = *(half2*)half_weight_buffer[28]  # 22 23
w = w * local_scale[0] + zeros[0]
dequantized_weight[44] = w.x         # 22
dequantized_weight[46] = w.y         # 23

w = *(half2*)half_weight_buffer[6]   # 24 25
w = w * local_scale[0] + zeros[0]
dequantized_weight[48] = w.x         # 24
dequantized_weight[50] = w.y         # 25
w = *(half2*)half_weight_buffer[14]  # 26 27
w = w * local_scale[0] + zeros[0]
dequantized_weight[52] = w.x         # 26
dequantized_weight[54] = w.y         # 27
w = *(half2*)half_weight_buffer[22]  # 28 29
w = w * local_scale[0] + zeros[0]
dequantized_weight[56] = w.x         # 28
dequantized_weight[58] = w.y         # 29
w = *(half2*)half_weight_buffer[30]  # 30 31
w = w * local_scale[0] + zeros[0]
dequantized_weight[60] = w.x         # 30
dequantized_weight[62] = w.y         # 31
